from abc import ABC
from typing import List
from pathlib import Path

import constant

from context import Context
from util import SessionNameBuilder

class TestController(ABC):
    """Test Controller that is used to run release tests.

    To introduce a new release test, developers need to extend this
    class and implement all functions.
    """

    def run(self) -> None:
        """Function used to run a release test."""
        raise NotImplementedError(
            "Test Controller class shouldn't be instantiated directly.")

    def process_logs(self, log_output_lines: List[str]) -> str:
        """Function used to process logs.
        
        Args:
            log_output_lines(List[str]): List of each line in the log output.
        Returns:
            Chunk of strings that will be dumped into a result log file.
        """
        raise NotImplementedError(
            "Test Controller class shouldn't be instantiated directly.")

    def generate_slackbot_message(self,
                                  results: str,
                                  current_time) -> str:
        """Function to generate a slack message.
        
        Args:
            results(str): Result string generated by the process_logs function.
        Return:
            Formatted string that will be sent to a slack channel.
        """
        raise NotImplementedError(
            "Test Controller class shouldn't be instantiated directly.")

    def write_result(self, result: str) -> None:
        """Function to dump the result.
        
        It flushes the result string generated by the process_logs function
        to a temp file. It returns the path of the file the result is written.
        """
        temp_dir = Path(constant.TEMP_DIR)
        temp_dir.mkdir(exist_ok=True)

        file_path = temp_dir / f"{self.context.test_type}.txt"
        with open(file_path, "w") as file:
            file.write(result)
        return file_path

